# download_data.py
import pandas as pd
from pathlib import Path

def create_sample_dataset():
    """
    Create sample BindingDB-style dataset for MVP
    In production, use full BindingDB or PDBbind data
    """
    
    print("Creating sample binding affinity dataset...")
    
    # Sample protein-ligand pairs with known binding affinities
    sample_data = {
        'Ligand_SMILES': [
            'CC(C)Cc1ccc(cc1)C(C)C(O)=O',  # Ibuprofen
            'CC(=O)Oc1ccccc1C(O)=O',        # Aspirin
            'CN1C=NC2=C1C(=O)N(C(=O)N2C)C', # Caffeine
            'CC(C)NCC(COc1ccccc1)O',        # Propranolol
            'CN1CCN(CC1)C(=O)c2ccccc2',     # Synthetic compound
        ],
        'Target_Sequence': [
            'MKKFFDSRREQGGSGLGSGSSGGGGSTSGLGSGYIGRVFGIGRQQVTVDEVLAEGGFAIVFLVRTSNGMKCALKRMFVNNEHDLQVCKREIQIMRDLSGHKNIVGYIDSSINNVSSGDVWEVLILMDFCRGGQVVNLMNQRLQTGFTENEVLQIFCDTCEAVARLHQCKTPIIHRDLKVENILLHDRGHYVLCDFGSATNKFQNPQTEGVNAVEDEIKKYTTLSYRAPEMVNLYSGKIITTKADIWALGCLLYKLCYFTLPFGESQVAICDGNFTIPDNSRYSQDMHCLIRYMLEPDPDKRPDIYQVSYFSFKLLKKECPIPNVQNSPIPAKLPEPVKASEAAAKKTQPKARLTDPIPTTETSIAPRQRPKAGQTQPNQAQGSGPAGEQGPAGSGSAAAGSGPGSGTGPGSGLGSGGGPVAPAPQAPQAPQAPLAGQGGAGAGSGMVPAPASGAPPQAPPALAGQGGAGAGSSSGGPTPPLSEPVPPINAGAPPVAGVPQAGAGSAAGSGSGPDGPLGVRGGAGSGGHEHPTDKQSWSLPQSVECRPFHTQTCKGSENATCLVKITDFGLARLLDIDETEYHADGGKVPIKWMALESILHRIYTHQSDVWSYGVTVWELMTFGSKPYDGIPASEISSILEKGERLPQPPICTIDVYMIMVKCWMIDADSRPKFRELIIEFSKMARDPQRYLVIQGDERMHLPSPTDSNFYRALMDEEDMDDVVDADEYLIPQQGFFCPDPAPGAGGMVHHRHRSSSTRSGGGDLTLGLEPSEEEAPRSPLAPSEGAGSDVFDGDLGMGAAKGLQSLPTHDPSPLQRYSEDPTVPLPSETDGYVAPLTCSPQPEYVNQPDVRPQPPSPREGPLPAARPAGATLERPKTLSPGKNGVVKDVFAFGGAVENPEYLTPQGGAAPQPHPPPAFSPAFDNLYYWDQDPPERGAPPSTFKGTPTAENPEYLGLDVPV',  # COX-2
            'MKKFFDSRREQGGSGLGSGSSGGGGSTSGLGSGYIGRVFGIGRQQVTVDEVLAEGGFAIVFLVRTSNGMKCALKRMFVNNEHDLQVCKREIQIMRDLSGHKNIVGYIDSSINNVSSGDVWEVLILMDFCRGGQVVNLMNQRLQTGFTENEVLQIFCDTCEAVARLHQCKTPIIHRDLKVENILLHDRGHYVLCDFGSATNKFQNPQTEGVNAVEDEIKKYTTLSYRAPEMVNLYSGKIITTKADIWALGCLLYKLCYFTLPFGESQVAICDGNFTIPDNSRYSQDMHCLIRYMLEPDPDKRPDIYQVSYFSFKLLKKECPIPNVQNSPIPAKLPEPVKASEAAAKKTQPKARLTDPIPTTETSIAPRQRPKAGQTQPNQAQGSGPAGEQGPAGSGSAAAGSGPGSGTGPGSGLGSGGGPVAPAPQAPQAPQAPLAGQGGAGAGSGMVPAPASGAPPQAPPALAGQGGAGAGSSSGGPTPPLSEPVPPINAGAPPVAGVPQAGAGSAAGSGSGPDGPLGVRGGAGSGGHEHPTDKQSWSLPQSVECRPFHTQTCKGSENATCLVKITDFGLARLLDIDETEYHADGGKVPIKWMALESILHRIYTHQSDVWSYGVTVWELMTFGSKPYDGIPASEISSILEKGERLPQPPICTIDVYMIMVKCWMIDADSRPKFRELIIEFSKMARDPQRYLVIQGDERMHLPSPTDSNFYRALMDEEDMDDVVDADEYLIPQQGFFCPDPAPGAGGMVHHRHRSSSTRSGGGDLTLGLEPSEEEAPRSPLAPSEGAGSDVFDGDLGMGAAKGLQSLPTHDPSPLQRYSEDPTVPLPSETDGYVAPLTCSPQPEYVNQPDVRPQPPSPREGPLPAARPAGATLERPKTLSPGKNGVVKDVFAFGGAVENPEYLTPQGGAAPQPHPPPAFSPAFDNLYYWDQDPPERGAPPSTFKGTPTAENPEYLGLDVPV',  # COX-1
            'MVLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKYR',  # Hemoglobin
            'MHHHHHHSSGVDLGTENLYFQSNAMDPILVAVAVSEKANIITTITDQDNVYSTESLVEMANQAKIKFPLDKVYTITPADLTYFEADQTGYLKNTLKVTVPAFNVINGGSHAGNKLAMQEFMILPVGASSFREAMRIGAILVGSDHADTGTYKSAVSVVRTLHPDMRIAYPADVFALKDYPMTPAQLEVGENVFRMGYDDEVLPYGISDPTKRMFTLRLDQSKGQAQVMLVTANGGSGALAAKITEVSKMKNMYIAQVVGKLREQLNAVLMRRGVGKLEITGIPLADAVRSGTGGTGGITLTIDRTQVFGIGGMTGGTTRAAIEKIERLGNVTGIKVKIGYNVRAEEFARKFGQRDITQQMEGKMVAIAGETITQREAFEYHGKFIHPECPTIKDPRGAIVLLDDMFTKDQAIEKLKQIGVMLDTNDEGLRVAFDFLMKDSQDLIYGDDVIVSPGLMKMLQEVGMGTAETAANDVAKALNVDLGGGTGGQAIRHGFLRKIEETEGIIKKIENLKVDEFGTPYKKVQNIFMALNDGLKPIGKPYQGAMIVTAYNGVTMKVSPTMRLSQQGIKLLNTEGEDIQKAISRARGDLGVEIPIGGYNVKDNAFKEVIISAPESIEAARAAAINMVFHGVKTSPILHFIESIKPRFTKAIDPFMTEVADGQSFKAVYTSVKDFVATIDGNEQKFGTATFEPRSVADMARAAREAGLKAVDPEGVKKLEAIQTRAKDTAKTLTEIEEKAEEKAK',  # Beta-adrenergic receptor
            'MAHHHHHHENLYFQGSMDPILILVAVSEKANIITTITDQDNVYSTESLVEMANQAKIKFPLDKVYTITPADLTYFEADQTGYLKNTLKVTVPAFNVINGGSHAGNKLAMQEFMILPVGASSFREAMRIGAILVGSDHADTGTYKSAVSVVRTLHPDMRIAYPADVFALKDYPMTPAQLEVGENVFRMGYDDEVLPYGISDPTKRMFTLRLDQSKGQAQVMLVTANGGSGALAAKITEVSKMKNMYIAQVVGKLREQLNAVLMRRGVGKLEITGIPLADAVRSGTGGTGGITLTIDRTQVFGIGGMTGGTTRAAIEKIERLGNVTGIKVKIGYNVRAEEFARKFGQRDITQQMEGKMVAIAGETITQREAFEYHGKFIHPECPTIKDPRGAIVLLDDMFTKDQAIEKLKQIGVMLDTNDEGLRVAFDFLMKDSQDLIYGDDVIVSPGLMKMLQEVGMGTAETAANDVAKALNVDLGGGTGGQAIRHGFLRKIEETEGIIKKIENLKVDEFGTPYKKVQNIFMALNDGLKPIGKPYQGAMIVTAYNGVTMKVSPTMRLSQQGIKLLNTEGEDIQKAISRARGDLGVEIPIGGYNVKDNAFKEVIISAPESIEAARAAAINMVFHGVKTSPILHFIESIKPRFTKAIDPFMTEVADGQSFKAVYTSVKDFVATIDGNEQKFGTATFEPRSVADMARAAREAGLKAVDPEGVKKLEAIQTRAKDTAKTLTEIEEKAEEKAK',  # Kinase
        ],
        'IC50_nM': [1200.0, 450.0, 8500.0, 25.0, 150.0],
        'Kd_nM': [1500.0, 550.0, 9000.0, 30.0, 180.0],
        'Target_Name': ['COX-2', 'COX-1', 'Adenosine Receptor', 'Beta-Adrenergic', 'Tyrosine Kinase']
    }
    
    df = pd.DataFrame(sample_data)
    
    # Save to data/raw
    output_path = Path('data/raw/sample_bindingdb.csv')
    output_path.parent.mkdir(parents=True, exist_ok=True)
    df.to_csv(output_path, index=False)
    
    print(f"âœ… Sample dataset saved to {output_path}")
    print(f"   Shape: {df.shape}")
    print(f"   Targets: {df['Target_Name'].tolist()}")
    
    return df

if __name__ == "__main__":
    df = create_sample_dataset()
    print("\nDataset preview:")
    print(df[['Target_Name', 'IC50_nM', 'Kd_nM']])
